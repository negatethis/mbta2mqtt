# Don't edit this file. Instead, edit one of these. 
# Files will be merged, with those listed later here
# updating the earlier ones. A key "endconfig: True"
# will stop processing (later files will be ignored).
configpath:
  - "/etc/mbta2mqtt/mbta2mqtt.conf"
  - "/opt/mbta2mqtt/mbta2mqtt.conf"
  - "/usr/local/etc/mbta2mqtt/mbta2mqtt.conf"

mbta:
  # Register for a key here: https://api-v3.mbta.com/register
  # You can make basic API requests without one, but you can't
  # use the streaming API, and we want to, so... that's step 1.
  api_key: !ENV MBTA_API_KEY

  # You can use
  # https://www.mass.gov/info-details/massgis-data-mbta-bus-routes-and-stops
  # to find stop numbers.
  # Note that sensors will be created for other
  # stops on lines that have routes to these
  # stops, but these are the ones for which
  # we will get predictions.
  #stops:
  #  - "110"
  #  - "2168"
  #  - "22549"

  # You probably don't want to change this.
  server:   "https://api-v3.mbta.com"
  endpoint: "/predictions"
  
  # These are 'include' parameters to a `predictions` query. See above. 
  #
  # Note that I've endevoured to make the code generally unaware of what these
  # things actually _are_, except for the relationship between stops and predictions.
  #
  # That means you should be able to add or remove things from the 'include' part
  # and generally get that passed through as expected. Some of this is usually
  # redundant, but e.g. `vehicle.stop` might be useful if a scheduled vehicle
  # is currently off on another route.
  include:
    - schedule
    - stop
    - stop.connecting_stops
    - stop.child_stops
    - stop.parent_station
    - route
    - route.alerts
    - route.line
    - route.route_patterns.representative_trip.shape
    - trip
    - trip.shape
    - trip.service
    - trip.stops
    - trip.alerts
    - trip.occupancies
    - trip.route_pattern.representative_trip.shape
    - vehicle
    - vehicle.route
    - vehicle.trip
    - vehicle.stop
    - alerts
    - alerts.facilities
  # these are hard-coded in the API and it makes me sad
  vehicle_types:
    0: 'light rail'
    1: 'heavy rail'
    2: 'commuter rail'
    3: 'bus'
    4: 'ferry'
  route_pattern_typicality:
    0: 'Not defined'
    1: 'Typical route'
    2: 'Route deviation'
    3: 'Special route'
    4: 'Diversion/detour'
  location_type:
    0: 'Stop'
    1: 'Station'
    2: 'Entrance/Exit'
    3: 'Generic Node'

mqtt:
  host: localhost
  port: 1883
  # prefix for the messages we send
  # (except for homeassistant discovery)
  prefix: mbta2mqtt
  keepalive: 120

homeassistant:
  # this is used so we can clean up after ourselves
  # when we get a "reset" message from the MBTA API
  discovery_prefix: homeassistant
  node_id: mbta
  friendly_prefix: "MBTA "
  entity:
    attribution: MassDOT
  alert:
    icon: "mdi:alert-outline"
  facility:
    entity_category: diagnostic
    icon: "mdi:wall"
  line:
    entity_category: diagnostic
    icon: "mdi:alpha-t-circle-outline"
  prediction:
    device_class: timestamp
    icon: "mdi:bus-marker"
    expire_after: 600
  route:
    entity_category: diagnostic
    icon: "mdi:transit-connection"
  route_pattern:
    entity_category: diagnostic
    icon: "mdi:transit-detour"
  schedule:
    device_class: timestamp
    icon: "mdi:bus-clock"
    expire_after: 600
  service:
    entity_category: diagnostic
    icon: "mdi:calendar-month-outline"
  shape:
    entity_category: diagnostic
    icon: "mdi:vector-polygon"
  stop:
    entity_category: diagnostic
    icon: "mdi:bus-stop-covered"
  trip:
    icon: "mdi:routes-clock"
  vehicle:
    icon: "mdi:bus"
    expire_after: 1200
  device:
    manufacturer: MassDOT
    model: v3 API

# https://docs.python.org/3/library/logging.config.html#logging-config-dictschema
# with levels extended by
# https://verboselogs.readthedocs.io/en/latest/readme.html#overview-of-logging-levels
# except I'm using "TRACE" instead of "SPAM"
logger:
  version: 1
  formatters:
    plain:
      format: '%(levelname)s - %(message)s'
    timestamped:
      format: '[%(asctime)s] mbta2mqtt - %(message)s'
      datefmt: '%Y-%m-%d %H:%M:%S'
    trace:
      format: '[%(asctime)s] {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s'
  handlers:
    console:
      class: logging.StreamHandler
      level: INFO
      formatter: plain
      stream: ext://sys.stdout
    file:
      class: logging.handlers.TimedRotatingFileHandler
      level: DEBUG
      formatter: timestamped
      filename: /var/log/mbta2mqtt/mbta2mqtt.log
      when: 'W0'
      backupCount: 3
    trace:
      class: logging.handlers.TimedRotatingFileHandler
      level: TRACE
      formatter: trace
      filename: /var/log/mbta2mqtt/mbta2mqtt.trace.log
      when: 'W0'
      backupCount: 1
  root:
    handlers: [console,file,trace]
    level: 1
  disable_existing_loggers: True
